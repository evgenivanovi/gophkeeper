// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: secret/public/api.proto

package public

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SecretManagementAPI_CreateDecoded_FullMethodName = "/secret_public.SecretManagementAPI/CreateDecoded"
	SecretManagementAPI_CreateEncoded_FullMethodName = "/secret_public.SecretManagementAPI/CreateEncoded"
)

// SecretManagementAPIClient is the client API for SecretManagementAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecretManagementAPIClient interface {
	CreateDecoded(ctx context.Context, in *CreateDecodedSecretRequest, opts ...grpc.CallOption) (*CreateDecodedSecretResponse, error)
	CreateEncoded(ctx context.Context, in *CreateEncodedSecretRequest, opts ...grpc.CallOption) (*CreateEncodedSecretResponse, error)
}

type secretManagementAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewSecretManagementAPIClient(cc grpc.ClientConnInterface) SecretManagementAPIClient {
	return &secretManagementAPIClient{cc}
}

func (c *secretManagementAPIClient) CreateDecoded(ctx context.Context, in *CreateDecodedSecretRequest, opts ...grpc.CallOption) (*CreateDecodedSecretResponse, error) {
	out := new(CreateDecodedSecretResponse)
	err := c.cc.Invoke(ctx, SecretManagementAPI_CreateDecoded_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretManagementAPIClient) CreateEncoded(ctx context.Context, in *CreateEncodedSecretRequest, opts ...grpc.CallOption) (*CreateEncodedSecretResponse, error) {
	out := new(CreateEncodedSecretResponse)
	err := c.cc.Invoke(ctx, SecretManagementAPI_CreateEncoded_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecretManagementAPIServer is the server API for SecretManagementAPI service.
// All implementations must embed UnimplementedSecretManagementAPIServer
// for forward compatibility
type SecretManagementAPIServer interface {
	CreateDecoded(context.Context, *CreateDecodedSecretRequest) (*CreateDecodedSecretResponse, error)
	CreateEncoded(context.Context, *CreateEncodedSecretRequest) (*CreateEncodedSecretResponse, error)
	mustEmbedUnimplementedSecretManagementAPIServer()
}

// UnimplementedSecretManagementAPIServer must be embedded to have forward compatible implementations.
type UnimplementedSecretManagementAPIServer struct {
}

func (UnimplementedSecretManagementAPIServer) CreateDecoded(context.Context, *CreateDecodedSecretRequest) (*CreateDecodedSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDecoded not implemented")
}
func (UnimplementedSecretManagementAPIServer) CreateEncoded(context.Context, *CreateEncodedSecretRequest) (*CreateEncodedSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEncoded not implemented")
}
func (UnimplementedSecretManagementAPIServer) mustEmbedUnimplementedSecretManagementAPIServer() {}

// UnsafeSecretManagementAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecretManagementAPIServer will
// result in compilation errors.
type UnsafeSecretManagementAPIServer interface {
	mustEmbedUnimplementedSecretManagementAPIServer()
}

func RegisterSecretManagementAPIServer(s grpc.ServiceRegistrar, srv SecretManagementAPIServer) {
	s.RegisterService(&SecretManagementAPI_ServiceDesc, srv)
}

func _SecretManagementAPI_CreateDecoded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDecodedSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretManagementAPIServer).CreateDecoded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretManagementAPI_CreateDecoded_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretManagementAPIServer).CreateDecoded(ctx, req.(*CreateDecodedSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretManagementAPI_CreateEncoded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEncodedSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretManagementAPIServer).CreateEncoded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretManagementAPI_CreateEncoded_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretManagementAPIServer).CreateEncoded(ctx, req.(*CreateEncodedSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SecretManagementAPI_ServiceDesc is the grpc.ServiceDesc for SecretManagementAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecretManagementAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "secret_public.SecretManagementAPI",
	HandlerType: (*SecretManagementAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDecoded",
			Handler:    _SecretManagementAPI_CreateDecoded_Handler,
		},
		{
			MethodName: "CreateEncoded",
			Handler:    _SecretManagementAPI_CreateEncoded_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "secret/public/api.proto",
}

const (
	SecretSeekingAPI_GetByName_FullMethodName = "/secret_public.SecretSeekingAPI/GetByName"
)

// SecretSeekingAPIClient is the client API for SecretSeekingAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecretSeekingAPIClient interface {
	GetByName(ctx context.Context, in *GetByNameSecretRequest, opts ...grpc.CallOption) (*GetSecretResponse, error)
}

type secretSeekingAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewSecretSeekingAPIClient(cc grpc.ClientConnInterface) SecretSeekingAPIClient {
	return &secretSeekingAPIClient{cc}
}

func (c *secretSeekingAPIClient) GetByName(ctx context.Context, in *GetByNameSecretRequest, opts ...grpc.CallOption) (*GetSecretResponse, error) {
	out := new(GetSecretResponse)
	err := c.cc.Invoke(ctx, SecretSeekingAPI_GetByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecretSeekingAPIServer is the server API for SecretSeekingAPI service.
// All implementations must embed UnimplementedSecretSeekingAPIServer
// for forward compatibility
type SecretSeekingAPIServer interface {
	GetByName(context.Context, *GetByNameSecretRequest) (*GetSecretResponse, error)
	mustEmbedUnimplementedSecretSeekingAPIServer()
}

// UnimplementedSecretSeekingAPIServer must be embedded to have forward compatible implementations.
type UnimplementedSecretSeekingAPIServer struct {
}

func (UnimplementedSecretSeekingAPIServer) GetByName(context.Context, *GetByNameSecretRequest) (*GetSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByName not implemented")
}
func (UnimplementedSecretSeekingAPIServer) mustEmbedUnimplementedSecretSeekingAPIServer() {}

// UnsafeSecretSeekingAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecretSeekingAPIServer will
// result in compilation errors.
type UnsafeSecretSeekingAPIServer interface {
	mustEmbedUnimplementedSecretSeekingAPIServer()
}

func RegisterSecretSeekingAPIServer(s grpc.ServiceRegistrar, srv SecretSeekingAPIServer) {
	s.RegisterService(&SecretSeekingAPI_ServiceDesc, srv)
}

func _SecretSeekingAPI_GetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByNameSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretSeekingAPIServer).GetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretSeekingAPI_GetByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretSeekingAPIServer).GetByName(ctx, req.(*GetByNameSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SecretSeekingAPI_ServiceDesc is the grpc.ServiceDesc for SecretSeekingAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecretSeekingAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "secret_public.SecretSeekingAPI",
	HandlerType: (*SecretSeekingAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetByName",
			Handler:    _SecretSeekingAPI_GetByName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "secret/public/api.proto",
}
