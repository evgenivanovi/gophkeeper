//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Secrets = newSecretsTable("public", "secrets", "")

type secretsTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	UserID    postgres.ColumnInteger
	TypeID    postgres.ColumnInteger
	Name      postgres.ColumnString
	Content   postgres.ColumnString
	CreatedAt postgres.ColumnTimestampz
	UpdatedAt postgres.ColumnTimestampz
	DeletedAt postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SecretsTable struct {
	secretsTable

	EXCLUDED secretsTable
}

// AS creates new SecretsTable with assigned alias
func (a SecretsTable) AS(alias string) *SecretsTable {
	return newSecretsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SecretsTable with assigned schema name
func (a SecretsTable) FromSchema(schemaName string) *SecretsTable {
	return newSecretsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SecretsTable with assigned table prefix
func (a SecretsTable) WithPrefix(prefix string) *SecretsTable {
	return newSecretsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SecretsTable with assigned table suffix
func (a SecretsTable) WithSuffix(suffix string) *SecretsTable {
	return newSecretsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSecretsTable(schemaName, tableName, alias string) *SecretsTable {
	return &SecretsTable{
		secretsTable: newSecretsTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newSecretsTableImpl("", "excluded", ""),
	}
}

func newSecretsTableImpl(schemaName, tableName, alias string) secretsTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		UserIDColumn    = postgres.IntegerColumn("user_id")
		TypeIDColumn    = postgres.IntegerColumn("type_id")
		NameColumn      = postgres.StringColumn("name")
		ContentColumn   = postgres.StringColumn("content")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn = postgres.TimestampzColumn("updated_at")
		DeletedAtColumn = postgres.TimestampzColumn("deleted_at")
		allColumns      = postgres.ColumnList{IDColumn, UserIDColumn, TypeIDColumn, NameColumn, ContentColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn}
		mutableColumns  = postgres.ColumnList{UserIDColumn, TypeIDColumn, NameColumn, ContentColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn}
	)

	return secretsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		UserID:    UserIDColumn,
		TypeID:    TypeIDColumn,
		Name:      NameColumn,
		Content:   ContentColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,
		DeletedAt: DeletedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
