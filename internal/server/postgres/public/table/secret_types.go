//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var SecretTypes = newSecretTypesTable("public", "secret_types", "")

type secretTypesTable struct {
	postgres.Table

	// Columns
	ID    postgres.ColumnInteger
	Value postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SecretTypesTable struct {
	secretTypesTable

	EXCLUDED secretTypesTable
}

// AS creates new SecretTypesTable with assigned alias
func (a SecretTypesTable) AS(alias string) *SecretTypesTable {
	return newSecretTypesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SecretTypesTable with assigned schema name
func (a SecretTypesTable) FromSchema(schemaName string) *SecretTypesTable {
	return newSecretTypesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SecretTypesTable with assigned table prefix
func (a SecretTypesTable) WithPrefix(prefix string) *SecretTypesTable {
	return newSecretTypesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SecretTypesTable with assigned table suffix
func (a SecretTypesTable) WithSuffix(suffix string) *SecretTypesTable {
	return newSecretTypesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSecretTypesTable(schemaName, tableName, alias string) *SecretTypesTable {
	return &SecretTypesTable{
		secretTypesTable: newSecretTypesTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newSecretTypesTableImpl("", "excluded", ""),
	}
}

func newSecretTypesTableImpl(schemaName, tableName, alias string) secretTypesTable {
	var (
		IDColumn       = postgres.IntegerColumn("id")
		ValueColumn    = postgres.StringColumn("value")
		allColumns     = postgres.ColumnList{IDColumn, ValueColumn}
		mutableColumns = postgres.ColumnList{ValueColumn}
	)

	return secretTypesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:    IDColumn,
		Value: ValueColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
